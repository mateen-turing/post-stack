generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  email     String      @unique
  username  String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  followers Follow[]    @relation("Follower")
  following Follow[]    @relation("Following")
  likes     PostLike[]
  savedPosts SavedPost[]
  posts     Post[]

  @@map("users")
}

model Post {
  id              String      @id @default(cuid())
  title           String
  content         String
  slug            String      @unique
  published       Boolean     @default(false)
  featured        Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  authorId        String
  categoryId      String?
  metaDescription String?
  metaTitle       String?
  ogImage         String?
  viewCount       Int         @default(0)
  likes           PostLike[]
  savedBy         SavedPost[]
  author          User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category        Category?   @relation(fields: [categoryId], references: [id])

  @@index([title])
  @@index([featured])
  @@map("posts")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  @@map("categories")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("followers")
}

model PostLike {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_likes")
}

model SavedPost {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("saved_posts")
}
